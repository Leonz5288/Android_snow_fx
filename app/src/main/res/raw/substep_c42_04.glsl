#version 310 es
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
precision highp float;
layout(std430, binding = 0) buffer data_i32 { int _data_i32_[];}; 
layout(std430, binding = 0) buffer data_f32 { float _data_f32_[];}; 
layout(std430, binding = 1) buffer gtmp_i32 { int _gtmp_i32_[];}; 
layout(std430, binding = 1) buffer gtmp_f32 { float _gtmp_f32_[];}; 
layout(std430, binding = 2) buffer args_i32 { int _args_i32_[];}; 
layout(std430, binding = 2) buffer args_f32 { float _args_f32_[];}; 
float atomicAdd_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_data_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _data_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_data_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }float atomicAdd_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) + rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicSub_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt((intBitsToFloat(old_val) - rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMax_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt(max(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); } float atomicMin_gtmp_f32(int addr, float rhs) { int old_val, new_val, ret; do { old_val = _gtmp_i32_[addr]; new_val = floatBitsToInt(min(intBitsToFloat(old_val), rhs)); } while (old_val != atomicCompSwap(_gtmp_i32_[addr], old_val, new_val)); return intBitsToFloat(old_val); }
const float inf = 1.0f / 0.0f;
const float nan = 0.0f / 0.0f;
void substep_c42_04()
{ // range for
  // range known at runtime
  int _beg = 0, _end = _gtmp_i32_[0 >> 2];
  int _sid0 = int(gl_GlobalInvocationID.x);
  for (int _sid = _sid0; _sid < (_end - _beg); _sid += int(gl_WorkGroupSize.x * gl_NumWorkGroups.x)) {
    int _itv = _beg + _sid;
      int L5 = _itv;
      int ClS = 0;
      int CMt = int(0);
      int ClU = ClS + 1019908 * CMt; // S0
      int ClV = ClU + 233476; // S1
      int CAd = int(16383);
      int CAe = L5 & CAd;
      int CMv = int(1);
      int ClY = ClV + 8 * CAe; // S1
      int ClZ = ClY + 0; // S2
      float L7 = _data_f32_[ClZ >> 2];
      float L8 = float(80.0);
      float L9 = L7 * L8;
      int Cm9 = ClY + 4; // S3
      float Lb = _data_f32_[Cm9 >> 2];
      float Lc = Lb * L8;
      float Ld = float(0.5);
      float Le = L9 - Ld;
      float Lf = Lc - Ld;
      int Lg = int(Le);
      int Lh = int(Lf);
      float Li = float(Lg);
      float Lj = float(Lh);
      float Lk = L9 - Li;
      float Ll = Lc - Lj;
      float Lm = float(1.5);
      float Ln = Lm - Lk;
      float Lo = Lm - Ll;
      float Lp = Ln * Ln;
      float Lq = Lo * Lo;
      float Lr = Lp * Ld;
      float Ls = Lq * Ld;
      float Lt = float(1.0);
      float Lu = Lk - Lt;
      float Lv = Ll - Lt;
      float Lw = Lu * Lu;
      float Lx = Lv * Lv;
      float Ly = float(0.75);
      float Lz = Ly - Lw;
      float LA = Ly - Lx;
      float LB = Lk - Ld;
      float LC = Ll - Ld;
      float LD = LB * LB;
      float LE = LC * LC;
      float LF = LD * Ld;
      float LG = LE * Ld;
      float LN = float(0.0);
      float LO = LN - Lk;
      float LP = LN - Ll;
      int Cmg = ClU + 167940; // S23
      int CAl = int(63);
      int CAm = Lg & CAl;
      int CAp = int(127);
      int CAq = Lh & CAp;
      int CQj = int(7);
      int CQk = CAm << CQj;
      int CMK = CAq + CQk;
      int Cmk = Cmg + 8 * CMK; // S23
      int Cml = Cmk + 0; // S24
      float LR = _data_f32_[Cml >> 2];
      int Cmx = Cmk + 4; // S25
      float LT = _data_f32_[Cmx >> 2];
      float LU = Lr * Ls;
      float LV = LU * LR;
      float LW = LU * LT;
      float M3 = LR * LO;
      float M4 = LR * LP;
      float M5 = LT * LO;
      float M6 = LT * LP;
      float M7 = float(320.0);
      float M8 = LU * M7;
      float M9 = M8 * M3;
      float Ma = M8 * M4;
      float Mb = M8 * M5;
      float Mc = M8 * M6;
      float Mp = Lt - Ll;
      int Mr = Lh + CMv;
      int CAG = Mr & CAp;
      int CN0 = CAG + CQk;
      int CmI = Cmg + 8 * CN0; // S23
      int CmJ = CmI + 0; // S24
      float Mt = _data_f32_[CmJ >> 2];
      int CmV = CmI + 4; // S25
      float Mv = _data_f32_[CmV >> 2];
      float Mw = Lr * LA;
      float Mx = Mw * Mt;
      float My = Mw * Mv;
      float MA = LV + Mx;
      float MD = LW + My;
      float MF = Mt * LO;
      float MG = Mt * Mp;
      float MH = Mv * LO;
      float MI = Mv * Mp;
      float MJ = Mw * M7;
      float MK = MJ * MF;
      float ML = MJ * MG;
      float MM = MJ * MH;
      float MN = MJ * MI;
      float MP = M9 + MK;
      float MS = Ma + ML;
      float MV = Mb + MM;
      float MY = Mc + MN;
      float N0 = float(2.0);
      float N1 = N0 - Ll;
      int N2 = int(2);
      int N3 = Lh + N2;
      int CAW = N3 & CAp;
      int CNg = CAW + CQk;
      int Cn6 = Cmg + 8 * CNg; // S23
      int Cn7 = Cn6 + 0; // S24
      float N5 = _data_f32_[Cn7 >> 2];
      int Cnj = Cn6 + 4; // S25
      float N7 = _data_f32_[Cnj >> 2];
      float N8 = Lr * LG;
      float N9 = N8 * N5;
      float Na = N8 * N7;
      float Nc = MA + N9;
      float Nf = MD + Na;
      float Nh = N5 * LO;
      float Ni = N5 * N1;
      float Nj = N7 * LO;
      float Nk = N7 * N1;
      float Nl = N8 * M7;
      float Nm = Nl * Nh;
      float Nn = Nl * Ni;
      float No = Nl * Nj;
      float Np = Nl * Nk;
      float Nr = MP + Nm;
      float Nu = MS + Nn;
      float Nx = MV + No;
      float NA = MY + Np;
      float NC = Lt - Lk;
      int ND = Lg + CMv;
      int CB8 = ND & CAl;
      int CQm = CB8 << CQj;
      int CNw = CAq + CQm;
      int Cnu = Cmg + 8 * CNw; // S23
      int Cnv = Cnu + 0; // S24
      float NF = _data_f32_[Cnv >> 2];
      int CnH = Cnu + 4; // S25
      float NH = _data_f32_[CnH >> 2];
      float NI = Lz * Ls;
      float NJ = NI * NF;
      float NK = NI * NH;
      float NM = Nc + NJ;
      float NP = Nf + NK;
      float NR = NF * NC;
      float NS = NF * LP;
      float NT = NH * NC;
      float NU = NH * LP;
      float NV = NI * M7;
      float NW = NV * NR;
      float NX = NV * NS;
      float NY = NV * NT;
      float NZ = NV * NU;
      float O1 = Nr + NW;
      float O4 = Nu + NX;
      float O7 = Nx + NY;
      float Oa = NA + NZ;
      int CNM = CAG + CQm;
      int CnS = Cmg + 8 * CNM; // S23
      int CnT = CnS + 0; // S24
      float Od = _data_f32_[CnT >> 2];
      int Co5 = CnS + 4; // S25
      float Of = _data_f32_[Co5 >> 2];
      float Og = Lz * LA;
      float Oh = Og * Od;
      float Oi = Og * Of;
      float Ok = NM + Oh;
      float On = NP + Oi;
      float Op = Od * NC;
      float Oq = Od * Mp;
      float Or = Of * NC;
      float Os = Of * Mp;
      float Ot = Og * M7;
      float Ou = Ot * Op;
      float Ov = Ot * Oq;
      float Ow = Ot * Or;
      float Ox = Ot * Os;
      float Oz = O1 + Ou;
      float OC = O4 + Ov;
      float OF = O7 + Ow;
      float OI = Oa + Ox;
      int CO2 = CAW + CQm;
      int Cog = Cmg + 8 * CO2; // S23
      int Coh = Cog + 0; // S24
      float OL = _data_f32_[Coh >> 2];
      int Cot = Cog + 4; // S25
      float ON = _data_f32_[Cot >> 2];
      float OO = Lz * LG;
      float OP = OO * OL;
      float OQ = OO * ON;
      float OS = Ok + OP;
      float OV = On + OQ;
      float OX = OL * NC;
      float OY = OL * N1;
      float OZ = ON * NC;
      float P0 = ON * N1;
      float P1 = OO * M7;
      float P2 = P1 * OX;
      float P3 = P1 * OY;
      float P4 = P1 * OZ;
      float P5 = P1 * P0;
      float P7 = Oz + P2;
      float Pa = OC + P3;
      float Pd = OF + P4;
      float Pg = OI + P5;
      float Pi = N0 - Lk;
      int Pj = Lg + N2;
      int CBU = Pj & CAl;
      int CQo = CBU << CQj;
      int COi = CAq + CQo;
      int CoE = Cmg + 8 * COi; // S23
      int CoF = CoE + 0; // S24
      float Pl = _data_f32_[CoF >> 2];
      int CoR = CoE + 4; // S25
      float Pn = _data_f32_[CoR >> 2];
      float Po = LF * Ls;
      float Pp = Po * Pl;
      float Pq = Po * Pn;
      float Ps = OS + Pp;
      float Pv = OV + Pq;
      float Px = Pl * Pi;
      float Py = Pl * LP;
      float Pz = Pn * Pi;
      float PA = Pn * LP;
      float PB = Po * M7;
      float PC = PB * Px;
      float PD = PB * Py;
      float PE = PB * Pz;
      float PF = PB * PA;
      float PH = P7 + PC;
      float PK = Pa + PD;
      float PN = Pd + PE;
      float PQ = Pg + PF;
      int COy = CAG + CQo;
      int Cp2 = Cmg + 8 * COy; // S23
      int Cp3 = Cp2 + 0; // S24
      float PT = _data_f32_[Cp3 >> 2];
      int Cpf = Cp2 + 4; // S25
      float PV = _data_f32_[Cpf >> 2];
      float PW = LF * LA;
      float PX = PW * PT;
      float PY = PW * PV;
      float Q0 = Ps + PX;
      float Q3 = Pv + PY;
      float Q5 = PT * Pi;
      float Q6 = PT * Mp;
      float Q7 = PV * Pi;
      float Q8 = PV * Mp;
      float Q9 = PW * M7;
      float Qa = Q9 * Q5;
      float Qb = Q9 * Q6;
      float Qc = Q9 * Q7;
      float Qd = Q9 * Q8;
      float Qf = PH + Qa;
      float Qi = PK + Qb;
      float Ql = PN + Qc;
      float Qo = PQ + Qd;
      int COO = CAW + CQo;
      int Cpq = Cmg + 8 * COO; // S23
      int Cpr = Cpq + 0; // S24
      float Qr = _data_f32_[Cpr >> 2];
      int CpD = Cpq + 4; // S25
      float Qt = _data_f32_[CpD >> 2];
      float Qu = LF * LG;
      float Qv = Qu * Qr;
      float Qw = Qu * Qt;
      float Qy = Q0 + Qv;
      float QB = Q3 + Qw;
      float QD = Qr * Pi;
      float QE = Qr * N1;
      float QF = Qt * Pi;
      float QG = Qt * N1;
      float QH = Qu * M7;
      float QI = QH * QD;
      float QJ = QH * QE;
      float QK = QH * QF;
      float QL = QH * QG;
      float QN = Qf + QI;
      float QQ = Qi + QJ;
      float QT = Ql + QK;
      float QW = Qo + QL;
      int CpJ = ClU + 364548; // S4
      int CpM = CpJ + 8 * CAe; // S4
      int CpN = CpM + 0; // S5
      _data_f32_[CpN >> 2] = Qy;
      int CpX = CpM + 4; // S6
      _data_f32_[CpX >> 2] = QB;
      int Cq3 = ClU + 495620; // S7
      int Cq6 = Cq3 + 16 * CAe; // S7
      int Cq7 = Cq6 + 0; // S8
      _data_f32_[Cq7 >> 2] = QN;
      int Cqh = Cq6 + 4; // S9
      _data_f32_[Cqh >> 2] = QQ;
      int Cqr = Cq6 + 8; // S10
      _data_f32_[Cqr >> 2] = QT;
      int CqB = Cq6 + 12; // S11
      _data_f32_[CqB >> 2] = QW;
      float Rg = float(0.0001);
      float Rh = Qy * Rg;
      float Ri = QB * Rg;
      float Rk = L7 + Rh;
      _data_f32_[ClZ >> 2] = Rk;
      float Rn = Lb + Ri;
      _data_f32_[Cm9 >> 2] = Rn;
  }
}

void main()
{
  substep_c42_04();
}
